'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="TEST")>  _
Partial Public Class UserDataDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definiciones de métodos de extensibilidad"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertUSER(instance As USER)
    End Sub
  Partial Private Sub UpdateUSER(instance As USER)
    End Sub
  Partial Private Sub DeleteUSER(instance As USER)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("TESTConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property USER() As System.Data.Linq.Table(Of USER)
		Get
			Return Me.GetTable(Of USER)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[USER]")>  _
Partial Public Class USER
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _USER_ID As Integer
	
	Private _USER_NAME As String
	
	Private _USER_LAST_NAME As String
	
	Private _USER_LOGIN As String
	
	Private _USER_PWD As String
	
	Private _USER_EMAIL As String
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUSER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUSER_IDChanged()
    End Sub
    Partial Private Sub OnUSER_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnUSER_NAMEChanged()
    End Sub
    Partial Private Sub OnUSER_LAST_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnUSER_LAST_NAMEChanged()
    End Sub
    Partial Private Sub OnUSER_LOGINChanging(value As String)
    End Sub
    Partial Private Sub OnUSER_LOGINChanged()
    End Sub
    Partial Private Sub OnUSER_PWDChanging(value As String)
    End Sub
    Partial Private Sub OnUSER_PWDChanged()
    End Sub
    Partial Private Sub OnUSER_EMAILChanging(value As String)
    End Sub
    Partial Private Sub OnUSER_EMAILChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_USER_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property USER_ID() As Integer
		Get
			Return Me._USER_ID
		End Get
		Set
			If ((Me._USER_ID = value)  _
						= false) Then
				Me.OnUSER_IDChanging(value)
				Me.SendPropertyChanging
				Me._USER_ID = value
				Me.SendPropertyChanged("USER_ID")
				Me.OnUSER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_USER_NAME", DbType:="VarChar(50)")>  _
	Public Property USER_NAME() As String
		Get
			Return Me._USER_NAME
		End Get
		Set
			If (String.Equals(Me._USER_NAME, value) = false) Then
				Me.OnUSER_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._USER_NAME = value
				Me.SendPropertyChanged("USER_NAME")
				Me.OnUSER_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_USER_LAST_NAME", DbType:="VarChar(100)")>  _
	Public Property USER_LAST_NAME() As String
		Get
			Return Me._USER_LAST_NAME
		End Get
		Set
			If (String.Equals(Me._USER_LAST_NAME, value) = false) Then
				Me.OnUSER_LAST_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._USER_LAST_NAME = value
				Me.SendPropertyChanged("USER_LAST_NAME")
				Me.OnUSER_LAST_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_USER_LOGIN", DbType:="VarChar(10)")>  _
	Public Property USER_LOGIN() As String
		Get
			Return Me._USER_LOGIN
		End Get
		Set
			If (String.Equals(Me._USER_LOGIN, value) = false) Then
				Me.OnUSER_LOGINChanging(value)
				Me.SendPropertyChanging
				Me._USER_LOGIN = value
				Me.SendPropertyChanged("USER_LOGIN")
				Me.OnUSER_LOGINChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_USER_PWD", DbType:="VarChar(50)")>  _
	Public Property USER_PWD() As String
		Get
			Return Me._USER_PWD
		End Get
		Set
			If (String.Equals(Me._USER_PWD, value) = false) Then
				Me.OnUSER_PWDChanging(value)
				Me.SendPropertyChanging
				Me._USER_PWD = value
				Me.SendPropertyChanged("USER_PWD")
				Me.OnUSER_PWDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_USER_EMAIL", DbType:="VarChar(100)")>  _
	Public Property USER_EMAIL() As String
		Get
			Return Me._USER_EMAIL
		End Get
		Set
			If (String.Equals(Me._USER_EMAIL, value) = false) Then
				Me.OnUSER_EMAILChanging(value)
				Me.SendPropertyChanging
				Me._USER_EMAIL = value
				Me.SendPropertyChanged("USER_EMAIL")
				Me.OnUSER_EMAILChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
